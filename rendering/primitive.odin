package rendering

@static cube_verts := [24][3]f32{
    {-1, -1,  1}, { 1, -1,  1}, {-1,  1,  1}, { 1,  1,  1}, // Front
    { 1, -1,  1}, { 1, -1, -1}, { 1,  1,  1}, { 1,  1, -1}, // Right
    { 1, -1, -1}, {-1, -1, -1}, { 1,  1, -1}, {-1,  1, -1}, // Back
    {-1, -1, -1}, {-1, -1,  1}, {-1,  1, -1}, {-1,  1,  1}, // Left
    {-1,  1,  1}, { 1,  1,  1}, {-1,  1, -1}, { 1,  1, -1}, // Top
    {-1, -1, -1}, { 1, -1, -1}, {-1, -1,  1}, { 1, -1,  1}, // Bottom
};

@static cube_uvs := [24][2]f32{
    {1/3.0, 1/3.0}, {2/3.0, 1/3.0}, {1/3.0, 2/3.0}, {2/3.0, 2/3.0}, // Front
    {2/3.0, 1/3.0}, {3/3.0, 1/3.0}, {2/3.0, 2/3.0}, {3/3.0, 2/3.0}, // Right
    {2/3.0, 0/3.0}, {3/3.0, 0/3.0}, {2/3.0, 1/3.0}, {3/3.0, 1/3.0}, // Back
    {0/3.0, 1/3.0}, {1/3.0, 1/3.0}, {0/3.0, 2/3.0}, {1/3.0, 2/3.0}, // Let
    {1/3.0, 2/3.0}, {2/3.0, 2/3.0}, {1/3.0, 3/3.0}, {2/3.0, 3/3.0}, // Top
    {1/3.0, 0/3.0}, {2/3.0, 0/3.0}, {1/3.0, 1/3.0}, {2/3.0, 1/3.0}, // Bottom
};

@static cube_normals := [24][3]f32{
    { 0,  0,  1}, { 0,  0,  1}, { 0,  0,  1}, { 0,  0,  1}, // Front
    { 1,  0,  0}, { 1,  0,  0}, { 1,  0,  0}, { 1,  0,  0}, // Right
    { 0,  0, -1}, { 0,  0, -1}, { 0,  0, -1}, { 0,  0, -1}, // Back
    {-1,  0,  0}, {-1,  0,  0}, {-1,  0,  0}, {-1,  0,  0}, // Left
    { 0,  1,  0}, { 0,  1,  0}, { 0,  1,  0}, { 0,  1,  0}, // Top
    { 0, -1,  0}, { 0, -1,  0}, { 0, -1,  0}, { 0, -1,  0}, // Bottom
};

@static cube_indices := [36]u16 {
     0, 1, 2,  1, 3, 2, // Front
     4, 5, 6,  5, 7, 6, // Right
     8, 9,10,  9,11,10, // Back
    12,13,14, 13,15,14, // Left
    16,17,18, 17,19,18, // Top
    20,21,22, 21,23,22, // Bottom
};

@private
_prim_cube := Mesh{};

prim_cube :: proc() -> Mesh
{
    if _prim_cube.vertices == nil
    {
        using _prim_cube;
        
        append(&vertices, ..cube_verts[:]);
        append(&uvs,      ..cube_uvs[:]);
        append(&normals,  ..cube_normals[:]);
        append(&indices,  ..cube_indices[:]);

        indexed = true;
        compute_tangent_basis(&_prim_cube);
        create_mesh_vbos(&_prim_cube);
    }
    return _prim_cube;
}
